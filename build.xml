<project name="MailVortex" default="compile" basedir=".">

  <property file="system.properties"/>
  <property file="system.properties"/>
  <property file="${user.home}/system.properties"/>
  <property file="application.properties"/>

  <property name="build.sysclasspath" value="ignore"/>
  
  <property name="app.version"   value="${app.version.major}.${app.version.minor}.${app.version.revision}"/>
  <property name="build.home"    value="${basedir}/app/build"/>
  <property name="dist.home"     value="${basedir}/app/dist"/>
  <property name="doc.home"      value="${basedir}/doc"/>
  <property name="src.home"      value="${basedir}/app/src"/>
  <property name="rtlib.home"    value="${basedir}/app/rtlib"/>
  <property name="app.source"    value="1.6"/>
  <property name="app.target"    value="1.6"/>

  <property name="compile.debug"       value="true"/>
  <property name="compile.deprecation" value="false"/>
  <property name="compile.optimize"    value="true"/>

  <!-- ==================== Main Targets ================================== -->
  
  <taskdef name="latex" classname="de.dokutransdata.antlatex.LaTeX">
    <classpath>
        <fileset dir="${basedir}/lib/"  includes="ant_latex_0.0.9.jar" />   
	  </classpath>
	</taskdef>  

  <target name="all" depends="compile,test,doc,javadoc" description="Clean build and dist directories, then compile"/>

  <target name="clean" description="Delete old build and dist directories">
    <delete dir="${build.home}"/>
    <delete dir="${dist.home}"/>
    <delete dir="${doc.home}/api"/>
    <delete dir="${doc.home}/cobertura"/>
    <delete><fileset dir="${basedir}" includes="pom.xml"/></delete>
    <delete><fileset dir="${doc.home}" includes="**/*.aux"/></delete>
    <delete><fileset dir="${doc.home}" includes="**/*.bbl"/></delete>
    <delete><fileset dir="${doc.home}" includes="**/*.aux"/></delete>
    <delete><fileset dir="${doc.home}" includes="**/*.idx"/></delete>
    <delete><fileset dir="${doc.home}" includes="**/*.out"/></delete>
    <delete><fileset dir="${doc.home}" includes="**/*.log"/></delete>
    <delete><fileset dir="${doc.home}" includes="**/*.lot"/></delete>
    <delete><fileset dir="${doc.home}" includes="**/*.ilg"/></delete>
    <delete><fileset dir="${doc.home}" includes="**/*.ind"/></delete>
    <delete><fileset dir="${doc.home}" includes="**/*.lof"/></delete>
    <delete><fileset dir="${doc.home}" includes="**/*.ist"/></delete>
    <delete><fileset dir="${doc.home}" includes="**/*.bak"/></delete>
    <delete><fileset dir="${doc.home}" includes="**/*.run.xml"/></delete>
    <delete><fileset dir="${doc.home}" includes="**/*.synctex.gz"/></delete>
    <delete><fileset dir="${doc.home}" includes="**/*.blg"/></delete>
    <delete><fileset dir="${doc.home}" includes="**/*-blx.bib"/></delete>
    <delete><fileset dir="${doc.home}" includes="**/*.toc"/></delete>
  </target>

  <target name="compile" depends="prepare" description="Compile Java sources">
    <echo message="user.home=${user.home}"/>
    <mkdir dir="${build.home}/src/${app.path}"/>
    <mkdir dir="${build.home}/classes/${app.path}"/>
    <touch file="${src.home}/Version.java"/>
    <copy  todir="${build.home}/src/${app.path}">
      <fileset dir="${src.home}/" includes="**/Version.java"/>
    </copy>
    <copy  todir="${build.home}/src/${app.path}">
      <fileset dir="${src.home}/" excludes="**/Version.java **/test/*.java"/>
    </copy>
    <copy  todir="${build.home}/testsrc/${app.path}">
      <fileset dir="${src.home}/" includes="**/test/*.java"/>
    </copy>
  	
    <mkdir dir="${build.home}/classes/${app.path}/images"/>
    <!--<copy  todir="${build.home}/classes/com/primecalc/java/klb4/images">
      <fileset dir="${src.home}/images" includes="**/*.*"/>
    </copy>
    <copy  todir="${build.home}/classes/endorsed">
      <fileset dir="${src.home}/endorsed" includes="**/*"/>
    </copy>-->
    <replace file="${build.home}/src/${app.path}/Version.java">
      <replacefilter token="@major@" value="${app.version.major}"/>
      <replacefilter token="@minor@" value="${app.version.minor}"/>
      <replacefilter token="@revision@" value="${app.version.revision}"/>
      <replacefilter token="@build@" value="${DSTAMP}${TSTAMP}"/>
    </replace>
    <javac srcdir="${build.home}/src"
          destdir="${build.home}/classes/"
            debug="${compile.debug}"
      deprecation="${compile.deprecation}"
           source="${app.source}"
           target="${app.target}"
         optimize="${compile.optimize}">
        <classpath refid="compile.classpath"/>
        <compilerarg value="-Xlint"/>
    </javac>
    <javac srcdir="${build.home}/testsrc"
          destdir="${build.home}/classes/"
            debug="${compile.debug}"
      deprecation="${compile.deprecation}"
           source="${app.source}"
           target="${app.target}"
         optimize="${compile.optimize}">
        <classpath refid="compile.classpath"/>
        <compilerarg value="-Xlint"/>
    </javac>
    <copy  todir="${build.home}/classes/">
      <fileset dir="${build.home}/src" excludes="**/*.java"/>
    </copy>
    <copy  todir="${build.home}/classes/">
      <fileset dir="${basedir}/app" includes="*.jks"/>
    </copy>
  </target>

  <target name="dist" depends="compile,test"  description="Create binary distribution">
    <mkdir dir="${dist.home}/docs"/>
    <copy todir="${dist.home}/docs">
      <fileset dir="${src.home}"/>
    </copy>
    <jar jarfile="${dist.home}/${app.name}-${app.version}.war"
         basedir="${build.home}"/>
  </target>

  <target name="run" depends="compile"  description="run application">
    <java dir="${build.home}/classes/" classname="${app.package}.${app.mainclass}" fork="yes" classpathref="run.classpath">
      <jvmarg line="-ea"/> 
      <arg line="-help"/>
    </java>
  </target>

  <target name="test" depends="compile"  description="test application">
	<taskdef classpathref="test.classpath" resource="tasks.properties" />
	<delete file="${build.home}/cobertura.ser" />
	<cobertura-instrument todir="${build.home}/cobertura" datafile="${build.home}/cobertura.ser">
		<includeclasses regex="net\.gwerder\.java.*" />
		<excludeclasses regex="net\.gwerder\.java.*\.test\..*" />
		<excludeclasses regex=".*Test.*" />
		<instrumentationClasspath>
			<pathelement location="${build.home}/classes" />
		</instrumentationClasspath>
	</cobertura-instrument>

	<mkdir dir='${build.home}/testsrc'/>
    <junit  fork="yes" haltonfailure="yes" dir="${build.home}/classes/"> <!-- showoutput="yes" printsummary="withOutAndErr" -->
        <sysproperty key="net.sourceforge.cobertura.datafile" file="${build.home}/cobertura.ser" />
        <classpath refid="test.classpath"/>
        <test name="${app.package}.test.MainSuite" todir="${build.home}/testsrc" outfile="TEST-MainSuite"/>
        <formatter type="xml"/>
        <formatter type="plain" usefile="false"/>
    </junit>
   
    <mkdir dir='${doc.home}/cobertura'/>
	<cobertura-report format="xml" destdir="${build.home}/testsrc"  datafile="${build.home}/cobertura.ser">
		<fileset dir="${build.home}/src">
			<include name="**/*.java" />
		</fileset>
	</cobertura-report>
	<cobertura-report format="html" destdir="${doc.home}/cobertura"  datafile="${build.home}/cobertura.ser">
		<fileset dir="${build.home}/src">
			<include name="**/*.java" />
		</fileset>
	</cobertura-report>

    <taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask">
        <classpath>
            <fileset dir="${basedir}/lib/pmd-bin-5.1.1/lib" includes="*.jar"/>
        </classpath>
    </taskdef>  
    <pmd shortFilenames="true">
        <sourceLanguage name="java" version="1.6"/>
        <ruleset>rulesets/java/design.xml</ruleset>
        <ruleset>java-basic</ruleset>
        <formatter type="html" toFile="${build.home}/pmd_report.html">
            <!--<param name="linkPrefix" value="http://pmd.sourceforge.net/xref/"/>-->
        </formatter>
        <formatter type="xml" toFile="${build.home}/pmd_report.xml">
            <!--<param name="linkPrefix" value="http://pmd.sourceforge.net/xref/"/>-->
        </formatter>
        <fileset dir="${build.home}/src">
            <include name="**/*.java"/>
        </fileset>
    </pmd>

	<!--- directories for sonar build -->
	<mkdir dir='${basedir}/target'/>
    <mkdir dir='${basedir}/target/sonar'/>

  </target>
  
  <target name="ensure-test-name" unless="test">    
    <fail message="You must run this target with -Dtest=TestName"/>
  </target>

  <target name="singletest" depends="ensure-test-name,compile"  description="test a single test">
    <junit  fork="yes" haltonfailure="yes" dir="${build.home}/classes/" showoutput="yes" printsummary="withOutAndErr" >
        <sysproperty key="tests" value="${tests}"/>
        <classpath refid="test.classpath"/>
        <formatter type="xml"/>
        <formatter type="plain" usefile="false"/>
        <batchtest>
            <fileset dir="${build.home}/testsrc/">
                <include name="**/${test}.java"/>
            </fileset>
        </batchtest>
    </junit>
  </target>

  <target name="test-gui" depends="compile"  description="run application">
    <java dir="${build.home}/classes/" classname="junit.swingui.TestRunner" fork="yes" classpathref="test.classpath">
		<!--<jvmarg line="-Djavax.net.ssl.keyStore=keystore.jks -Djavax.net.ssl.keyStorePassword=changeme"/> -->
      <arg line="${app.package}.test.MainSuite"/>
    </java>
  </target>

  <target name="doc" depends="compile,javadoc,pdf"  description="create app docs"/>
  <target name="javadoc" depends="compile"  description="create api docs">
    <mkdir dir='${doc.home}'/>
    <mkdir dir='${doc.home}/api/'/>
    <javadoc 
             destdir='${doc.home}/api'
             author='true'
             version='true'
             linksource='true'
             >
      <classpath refid="compile.classpath"/>       
      <!--<link offline="false" href="http://java.sun.com/j2se/1.5.0/docs/api/" packagelistLoc="C:/temp/pl1"/>
      <link offline="false" href="http://developer.java.sun.com/developer/products/xml/docs/api/" packagelistLoc="C:/temp/pl2"/>  -->
	  <tag name="known.bug" description="Known bugs:"/>
	  <tag name="to.do" description="TODOs:"/>
      <fileset dir="${build.home}/src/" defaultexcludes="yes">
        <include name="**/*.java"/>
      </fileset>
      <fileset dir="${src.home}/" defaultexcludes="yes">
        <include name="**/*.java"/>
        <exclude name="Version.java"/>
      </fileset>
    </javadoc>
  </target>
  
  <target name="pdf" depends="pdf-uptodate,pdf-vortex,pdf-roadmap,pdf-plan">
  </target>
  

  <!-- =================================== Sub targets -->

  <target name="pdf-plan" unless="mailvortexplan.uptodate" depends="pdf-uptodate">
	<latex
	path="${path.miktex}"
        latexfile="${doc.home}/mailvortex_Plan.tex"
        verbose="on"
        clean="off"
        pdftex="on"
        passThruLaTeXParameters="-synctex=1"
        workingDir="${doc.home}">
            <makeindex
		path="${path.miktex}"
                run="on"
                workingDir="${doc.home}">
                <fileset dir="${doc.home}"> 
                   <include name="*.nlo" /> 
                </fileset> 
            </makeindex>
            <bibtex
		path="${path.miktex}"
                run="on"
                workingDir="${doc.home}" />
    </latex>
  </target>
  
  <target name="pdf-roadmap" unless="mailvortexrm.uptodate" depends="pdf-uptodate">
    <latex
	path="${path.miktex}"
        latexfile="${doc.home}/mailvortex_Roadmap.tex"
        verbose="on"
        clean="off"
        pdftex="on"
        passThruLaTeXParameters="-synctex=1"
        workingDir="${doc.home}">
            <makeindex
		path="${path.miktex}"
                run="on"
                workingDir="${doc.home}">
                <fileset dir="${doc.home}"> 
                   <include name="*.nlo" /> 
                </fileset> 
            </makeindex>
            <bibtex
		path="${path.miktex}"
                run="on"
                workingDir="${doc.home}" />
    </latex>
  </target>
  
  <target name="pdf-vortex" unless="mailvortexdoc.uptodate" depends="pdf-uptodate">
    <latex
		path="${path.miktex}"
        latexfile="${doc.home}/mailvortex.tex"
        verbose="on"
        clean="off"
        pdftex="on"
        passThruLaTeXParameters="-synctex=1"
        workingDir="${doc.home}">
            <makeindex
		path="${path.miktex}"
                run="on"
                workingDir="${doc.home}">
                <fileset dir="${doc.home}"> 
                   <include name="*.nlo" /> 
                </fileset> 
            </makeindex>
            <bibtex
		path="${path.miktex}"
                run="on"
                workingDir="${doc.home}" />
    </latex>
  </target>
  
  <target name="pdf-uptodate">
	<condition property="mailvortexdoc.uptodate">
		<uptodate targetfile="${doc.home}/mailvortex.pdf">
			<srcfiles dir="${doc.home}" includes="inc/**/*.tex inc/**/*.inc **/*.bib mailvortex.tex **/*.fig **/*.png **/*.jpg"/>
		</uptodate>
	</condition>
	<condition property="mailvortexrm.uptodate">
		<uptodate targetfile="${doc.home}/mailvortex_Roadmap.pdf">
			<srcfiles dir="${doc.home}" includes="mailvortex_Roadmap.tex"/>
		</uptodate>
	</condition>
	<condition property="mailvortexplan.uptodate">
		<uptodate targetfile="${doc.home}/mailvortex_Plan.pdf">
			<srcfiles dir="${doc.home}/inc" includes="mailvortex_Plan.tex"/>
		</uptodate>
	</condition>
  </target>	

  <target name="xml" depends="prepare">
    <!-- build xml classes -->
    <taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask">
      <classpath>
        <fileset dir="C:\vApps\jaxb-ri-20110412\lib"  includes="jaxb-xjc.jar" />   
	  </classpath>
    </taskdef>
    <echo message="Building all xml classes ..." />
    <mkdir dir="${build.home}/src/${app.path}/xml"/>
    <xjc destdir="${build.home}/src" removeOldOutput="yes" package="${app.package}.xml">
      <classpath refid="compile.classpath"/>
      <arg line="-verbose -httpproxy www-proxy.admin.ch:8080"/>
      <schema dir="${src.home}/xml" includes="test.xsd" />
      <produces dir="${build.home}/src/${app.path}/xml" includes="* impl/*"/>
    </xjc>
    <copy todir="${build.home}/src/${app.path}/xml">
      <fileset dir="${src.home}/xml" includes="*.index *.xsd"/>
    </copy>
  </target>

  <target name="prepare_windows" if="isWindows" depends="pre_prepare">
    <echo message="Reading windows specific properties ..." />
    <property file="build.windows.properties"/>
  </target>

  <target name="prepare_unix" if="isUnix" depends="pre_prepare">
    <echo message="Reading unix specific properties ..." />
    <property file="build.unix.properties"/>
  </target>

  <target name="pre_prepare">
    <condition property="isUnix">
      <and>
        <os family="unix"/>
      </and>
    </condition>
    <condition property="isWindows">
      <and>
        <os family="windows"/>
      </and>
    </condition>
  </target>

  <target name="prepare" depends="prepare_windows,prepare_unix">
    <tstamp/>
    <mkdir  dir="${build.home}"/>
    <mkdir  dir="${build.home}/src"/>
    <mkdir  dir="${build.home}/src"/>
    <mkdir  dir="${build.home}/classes"/>
    <mkdir  dir="${build.home}/classes/logs"/>
    <mkdir  dir="${build.home}/cobertura"/>

    <path id="compile.classpath">
      <pathelement location="c:/Programme/Java/lib/hsqldb/lib/hsqldb.jar"/>
      <fileset dir="${rtlib.home}" includes="**/*.jar"/>
      <fileset dir="${basedir}/lib/junit-4.11" includes="*.jar"/>
      <pathelement location="${build.home}/classes" />
    </path>

    <path id="test.classpath">
      <pathelement location="c:/Programme/Java/lib/hsqldb/lib/hsqldb.jar"/>
      <fileset dir="${rtlib.home}" includes="**/*.jar"/>
      <fileset dir="${basedir}/lib/" includes="junit*.jar"/>
      <fileset dir="${basedir}/lib/cobertura-2.0.3/lib" includes="*.jar"/>
      <fileset dir="${basedir}/lib/cobertura-2.0.3" includes="cobertura-2.0.3.jar"/>
      <fileset dir="${basedir}/lib/junit-4.11" includes="*.jar"/>
      <pathelement location="${build.home}/cobertura" />
      <pathelement location="${build.home}/classes" />
    </path>
    
    <path id="run.classpath">
      <pathelement location="c:/Programme/Java/lib/hsqldb/lib/hsqldb.jar"/>
      <fileset dir="${rtlib.home}" includes="**/*.jar"/>
      <pathelement location="${build.home}/classes" />
    </path>

  </target>



</project>