<project name="MailVortex" default="compile" basedir=".">

  <property file="system.properties"/>
  <property file="system.properties"/>
  <property file="${user.home}/system.properties"/>
  <property file="application.properties"/>

  <property name="build.sysclasspath" value="ignore"/>
  
  <property name="app.version"   value="${app.version.major}.${app.version.minor}.${app.version.revision}"/>
  <property name="build.home"    value="${basedir}/app/build"/>
  <property name="dist.home"     value="${basedir}/app/dist"/>
  <property name="doc.home"      value="${basedir}/doc"/>
  <property name="src.home"      value="${basedir}/app/src"/>
  <property name="rtlib.home"    value="${basedir}/app/rtlib"/>
  <property name="app.source"    value="1.6"/>
  <property name="app.target"    value="1.6"/>

  <property name="compile.debug"       value="true"/>
  <property name="compile.deprecation" value="false"/>
  <property name="compile.optimize"    value="true"/>

  <!-- ==================== Main Targets ================================== -->
  
  <taskdef name="latex" classname="de.dokutransdata.antlatex.LaTeX">
    <classpath>
        <fileset dir="${basedir}/lib/"  includes="ant_latex_0.0.9.jar" />   
	  </classpath>
	</taskdef>  

  <target name="all" depends="compile,doc" description="Clean build and dist directories, then compile"/>

  <target name="clean" description="Delete old build and dist directories">
    <delete dir="${build.home}"/>
    <delete dir="${dist.home}"/>
  </target>

  <target name="compile" depends="prepare" description="Compile Java sources">
    <mkdir dir="${build.home}/src/${app.path}"/>
    <mkdir dir="${build.home}/classes/${app.path}"/>
    <copy  todir="${build.home}/src/">
      <fileset dir="${src.home}/" includes="**/*.java"/>
    </copy>
  	
    <touch file="${build.home}/src/${app.path}/Version.java"/>

    <mkdir dir="${build.home}/classes/${app.path}/images"/>
    <!--<copy  todir="${build.home}/classes/com/primecalc/java/klb4/images">
      <fileset dir="${src.home}/images" includes="**/*.*"/>
    </copy>
    <copy  todir="${build.home}/classes/endorsed">
      <fileset dir="${src.home}/endorsed" includes="**/*"/>
    </copy>-->
    <replace file="${build.home}/src/${app.path}/Version.java">
      <replacefilter token="@major@" value="${app.version.major}"/>
      <replacefilter token="@minor@" value="${app.version.minor}"/>
      <replacefilter token="@revision@" value="${app.version.revision}"/>
      <replacefilter token="@build@" value="${DSTAMP}${TSTAMP}"/>
    </replace>
    <javac srcdir="${build.home}/src"
          destdir="${build.home}/classes/"
            debug="${compile.debug}"
      deprecation="${compile.deprecation}"
         source="${app.source}"
         target="${app.target}"
         optimize="${compile.optimize}">
        <classpath refid="compile.classpath"/>
    </javac>
    <copy  todir="${build.home}/classes/">
      <fileset dir="${build.home}/src" excludes="**/*.java"/>
    </copy>
    <!--<copy todir="${build.home}/classes/${app.path}/xml">
      <fileset dir="${build.home}/src/${app.path}/xml" includes="*.properties *.ser *.index" />
    </copy>-->
  </target>

  <target name="dist" depends="compile"  description="Create binary distribution">
    <mkdir dir="${dist.home}/docs"/>
    <copy todir="${dist.home}/docs">
      <fileset dir="${src.home}"/>
    </copy>
    <jar jarfile="${dist.home}/${app.name}-${app.version}.war"
         basedir="${build.home}"/>
  </target>

  <target name="run" depends="compile"  description="run application">
    <java dir="${build.home}/classes/" classname="${app.package}.${app.mainclass}" fork="yes" classpathref="compile.classpath">
      <jvmarg line="-ea -Djava.endorsed.dirs=endorsed"/> <!-- -Djaxp.debug=1 -->
      <arg line="-help"/>
    </java>
  </target>

  <target name="doc" depends="compile,javadoc,pdf"  description="create app docs"/>
  <target name="javadoc" depends="compile"  description="create api docs">
    <mkdir dir='${doc.home}'/>
    <mkdir dir='${doc.home}/api/'/>
    <javadoc source='${app.source}'
             destdir='${doc.home}/api'
             author='true'
             version='true'
             linksource='true'
             >
      <!--<link offline="false" href="http://java.sun.com/j2se/1.5.0/docs/api/" packagelistLoc="C:/temp/pl1"/>
      <link offline="false" href="http://developer.java.sun.com/developer/products/xml/docs/api/" packagelistLoc="C:/temp/pl2"/>  -->
      <fileset dir="${build.home}/src/" defaultexcludes="yes">
        <include name="**/*.java"/>
      </fileset>
    </javadoc>
  </target>
  
  <target name="pdf">
    <latex
        latexfile="${doc.home}/AnonMail.tex"
        verbose="on"
        clean="off"
        pdftex="on"
        passThruLaTeXParameters="-synctex=1"
        workingDir="${doc.home}">
            <makeindex
                run="on"
                workingDir="${doc.home}">
                <fileset dir="${doc.home}"> 
                   <include name="*.nlo" /> 
                </fileset> 
            </makeindex>
            <bibtex
                run="on"
                workingDir="${doc.home}" />
    </latex>
    <latex
        latexfile="${doc.home}/AnonMail_Plan.tex"
        verbose="on"
        clean="off"
        pdftex="on"
        passThruLaTeXParameters="-synctex=1"
        workingDir="${doc.home}">
            <makeindex
                run="on"
                workingDir="${doc.home}">
                <fileset dir="${doc.home}"> 
                   <include name="*.nlo" /> 
                </fileset> 
            </makeindex>
            <bibtex
                run="on"
                workingDir="${doc.home}" />
    </latex>
    <latex
        latexfile="${doc.home}/AnonMail_Roadmap.tex"
        verbose="on"
        clean="off"
        pdftex="on"
        passThruLaTeXParameters="-synctex=1"
        workingDir="${doc.home}">
            <makeindex
                run="on"
                workingDir="${doc.home}">
                <fileset dir="${doc.home}"> 
                   <include name="*.nlo" /> 
                </fileset> 
            </makeindex>
            <bibtex
                run="on"
                workingDir="${doc.home}" />
    </latex>
  </target>
  

  <!-- =================================== Sub targets -->

  <target name="xml" depends="prepare">
    <!-- build xml classes -->
    <taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask">
      <classpath>
        <fileset dir="C:\vApps\jaxb-ri-20110412\lib"  includes="jaxb-xjc.jar" />   
	  </classpath>
    </taskdef>
    <echo message="Building all xml classes ..." />
    <mkdir dir="${build.home}/src/${app.path}/xml"/>
    <xjc destdir="${build.home}/src" removeOldOutput="yes" package="${app.package}.xml">
      <classpath refid="compile.classpath"/>
      <arg line="-verbose -httpproxy www-proxy.admin.ch:8080"/>
      <schema dir="${src.home}/xml" includes="test.xsd" />
      <produces dir="${build.home}/src/${app.path}/xml" includes="* impl/*"/>
    </xjc>
    <copy todir="${build.home}/src/${app.path}/xml">
      <fileset dir="${src.home}/xml" includes="*.index *.xsd"/>
    </copy>
  </target>

  <target name="prepare_windows" if="isWindows" depends="pre_prepare">
    <echo message="Reading windows specific properties ..." />
    <property file="build.windows.properties"/>
  </target>

  <target name="prepare_unix" if="isUnix" depends="pre_prepare">
    <echo message="Reading unix specific properties ..." />
    <property file="build.unix.properties"/>
  </target>

  <target name="pre_prepare">
    <condition property="isUnix">
      <and>
        <os family="unix"/>
      </and>
    </condition>
    <condition property="isWindows">
      <and>
        <os family="windows"/>
      </and>
    </condition>
  </target>

  <target name="prepare" depends="prepare_windows,prepare_unix">
    <tstamp/>
    <mkdir  dir="${build.home}"/>
    <mkdir  dir="${build.home}/src"/>
    <mkdir  dir="${build.home}/src"/>
    <mkdir  dir="${build.home}/classes"/>

    <path id="compile.classpath">
      <pathelement location="c:/Programme/Java/lib/hsqldb/lib/hsqldb.jar"/>
      <!--<fileset dir="${junit.dir}" includes="*.jar"/>-->
      <!--<fileset dir="${jwsdp.dir}/jaxb/lib" includes="*.jar" excludes="jaxb-impl.jar"/>-->
      <!--<fileset dir="${jwsdp.dir}/jaxb/lib" includes="*.jar"/>-->
      <!--<fileset dir="${jwsdp.dir}">
        <include name="jaxp/**/*.jar" exclude="jaxb-api.jar"/>
        <include name="jwsdp-shared/lib/**/*.jar"/>
      </fileset>-->
      <fileset dir="${rtlib.home}" includes="*.jar"/>
      <pathelement location="${build.home}/classes" />
    </path>

  </target>



</project>