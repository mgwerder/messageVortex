
Message-Blocks DEFINITIONS EXPLICIT TAGS ::= 
BEGIN
  Message     ::= SEQUENCE {
    identity    IdentityBlock,
    routing     RoutingBlock OPTIONAL,
    routingInfo RoutingInformationBlock OPTIONAL,
    payload     SEQUENCE (SIZE (0..MAX)) OF PayloadBlock 
  }
  
  IdentityBlock ::= SEQUENCE {
    identity          AsymetricKey,
    serial            INTEGER (0..MAX),
    valid             UsagePeriod,  -- subsequent Blocks are not processed before valid. Host may reject too long retention.
    forwardSecret     ChainSecret OPTIONAL,
    decryptionKey     SymetricKey,
    requests          SEQUENCE (SIZE (0..5)) OF HeaderRequest ,
    challenge     [0] OCTET STRING OPTIONAL, -- The Challenge of a crypto puzzle
    padding       [1] OCTET STRING OPTIONAL  -- This is for solving crypto puzzles
  }
  
  ChainSecret ::= INTEGER (0..MAX)
  
  -- FIXME define requests
  HeaderRequest ::= CHOICE {
    identity      [0] HeaderRequestIdentity,
    capabilities  [1] HeaderRequestCapability,
    ...
  }
  
  HeaderRequestIdentity ::= SEQUENCE {
    period UsagePeriod,
    ...
  }
  
  HeaderRequestCapability ::= SEQUENCE {
    period UsagePeriod,
    ...
  }

  HeaderReplyCapabilities ::= SEQUENCE {
    ...
  }
  
  ErrorCode ::= ENUMERATED {
    
    -- System messages
    
    -- protocol usage failures
    transferQuotaExceeded (3001),
    messageQuotaExceeded  (3002),
    identityUnknown       (3101),
    messageChunkMissing   (3201),
    messageLifeExpired    (3202), 
    
    -- Mayor host specific errors
    hostError     (5001),
    ...
  }
  
  PayloadBlock ::= CHOICE {
    chunk  [0] ChunkMessage,
    rchunk [1] RoutableChunkMessage,
    ...
  }  

  RoutableChunkMessage ::= SEQUENCE {
    route RoutingBlock,
    chunk ChunkMessage
  }
  
  RoutingBlock ::= SEQUENCE {
    recipient OCTET STRING,
    queueTime UsagePeriod,
    nextHop   OCTET STRING,
    
    forwardSecret ChainSecret OPTIONAL,
    
    -- This section is required if payload is routed 
    decryptionKey [0] SymetricKey OPTIONAL,
    encryptionKey [1] SymetricKey OPTIONAL,
    
    ...
  }
 
  -- Compatible to PrivateKeyUsagePeriod taken from RFC3280
  UsagePeriod ::= SEQUENCE {
    notBefore       [0]     GeneralizedTime OPTIONAL,
    notAfter        [1]     GeneralizedTime OPTIONAL
 }
 
  -- Compatible to SubjectPublicKeyInfo taken from RFC3280
  PublicKeyInfo  ::=  SEQUENCE  {
    algorithm     AsymetricAlgorithmIdentifier,
    publicKey     BIT STRING  
  }
  
  PrivateKeyInfo ::= SEQUENCE {
    algorithm       AsymetricAlgorithmIdentifier,
    privateKey      BIT STRING
  }


  -- adapted from RFC3280
  SymetricAlgorithmIdentifier  ::=  SEQUENCE  {
    algorithm               SymetricAlgorithm
  }

  AsymetricAlgorithmIdentifier  ::=  SEQUENCE  {
    algorithm               AsymetricAlgorithm
  }

  
  SymetricAlgorithm ::= ENUMERATED {
    aes256    (1),
    aesgcm256 (2),
    ...    
  }
  
  AsymetricAlgorithm ::= ENUMERATED {
    rsa    (1),
    ecdsa  (2),
    dss    (3),
    ...    
  }
  
  MacAlgorithm ::= ENUMERATED {
    sha    (1),
    aead   (2),
    ...    
  }
  
  AlgorithmParameters ::= CHOICE {
    keySize INTEGER (1..MAX),
    ...    
  }
  
  ChunkMessage ::= SEQUENCE {
    offset INTEGER (0..MAX),
    payload OCTET STRING
  }
  
  -- Symetric key
  SymetricKey ::= SEQUENCE {
    keyType SymetricAlgorithmIdentifier,
    key     BIT STRING
  }
  
  -- Asymetric Key
  AsymetricKey ::= SEQUENCE {
    keyType       AsymetricAlgorithmIdentifier,
    publicKey     BIT STRING,
    privateKey    BIT STRING OPTIONAL
  }
  
END

pkcs-1    OBJECT IDENTIFIER ::= { iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) 1 }

-- FROM RFC5480
id-ansi        OBJECT IDENTIFIER ::= { iso(1) member-body(2) us(840) ansi-X9-62(10045) }
id-certicom    OBJECT IDENTIFIER ::= { iso(1) identified-organization(3) certicom(132) }

id-ecPublicKey OBJECT IDENTIFIER ::= { id-ansi keyType(2) 1 }

dsaEncryption  OBJECT IDENTIFIER ::= { iso(1) member-body(2) us(840) x9-57(10040) x9cm(4) 1 } -- RFC3279
rsaEncryption  OBJECT IDENTIFIER ::= { pkcs-1 1 }

secp192r1 OBJECT IDENTIFIER ::= { id-ansi  curves(3) prime(1) 1 }
sect163k1 OBJECT IDENTIFIER ::= { id-certicom curve(0) 1 }
sect163r2 OBJECT IDENTIFIER ::= { id-certicom curve(0) 15 }
secp224r1 OBJECT IDENTIFIER ::= { id-certicom curve(0) 33 }
sect233k1 OBJECT IDENTIFIER ::= { id-certicom curve(0) 26 }
sect233r1 OBJECT IDENTIFIER ::= { id-certicom curve(0) 27 }
secp256r1 OBJECT IDENTIFIER ::= { id-ansi curves(3) prime(1) 7 }
sect283k1 OBJECT IDENTIFIER ::= { id-certicom curve(0) 16 }
sect283r1 OBJECT IDENTIFIER ::= { id-certicom curve(0) 17 }
secp384r1 OBJECT IDENTIFIER ::= { id-certicom curve(0) 34 }
sect409k1 OBJECT IDENTIFIER ::= { id-certicom curve(0) 36 }
sect409r1 OBJECT IDENTIFIER ::= { id-certicom curve(0) 37 }
secp521r1 OBJECT IDENTIFIER ::= { id-certicom curve(0) 35 }
sect571k1 OBJECT IDENTIFIER ::= { id-certicom curve(0) 38 }
sect571r1 OBJECT IDENTIFIER ::= { id-certicom curve(0) 39 }
