-- FIXME Backreferences
-- FIXME Replay protection (delay between packets embedded multiple serials)
-- FIXME Embed all encrypted information

Message-Blocks DEFINITIONS EXPLICIT TAGS ::= 
BEGIN

  Message     ::= SEQUENCE {
    identity    IdentityBlock,
    routing     [0] RoutingBlock OPTIONAL,
    routingLog  [1] RoutingLogBlock OPTIONAL,
    reply       [2] HeaderReply OPTIONAL,
    payload     SEQUENCE (SIZE (0..65535)) OF PayloadBlock  
  }

  IdentityBlock ::= SEQUENCE {
    identity          AsymetricKey,
    serial            INTEGER (0..MAX),
    valid             UsagePeriod,  -- subsequent Blocks are not processed before valid. Host may reject too long retention.
    forwardSecret     ChainSecret OPTIONAL,
    decryptionKey     SymetricKey,
    requests          SEQUENCE (SIZE (0..5)) OF HeaderRequest ,
    padding       [1] BIT STRING OPTIONAL  -- This is for solving crypto puzzles
  }
  
  RoutingBlock ::= SEQUENCE {
    recipient OCTET STRING,
    queueTime UsagePeriod,
    nextHop   OCTET STRING,
    
    forwardSecret     [0] ChainSecret OPTIONAL,
    errorRoutingBlock [1] RoutingBlock OPTIONAL,
    replyBlock        [2] RoutingBlock OPTIONAL,
    
    -- This section is required if payload is routed with a prebuilt RB
    decryptionKey [100] SEQUENCE (SIZE (1..2)) OF SymetricKey OPTIONAL,
    encryptionKey [101] SymetricKey OPTIONAL,
    
    -- FIXME This section is optional. It is required for reply blocks (building information)
    cascade       [200] SEQUENCE(SIZE (0..255)) OF CascadeBuildInformation,
    ...
  }
  
  CascadeBuildInformation ::= SEQUENCE {
    encryptionKey   SymetricKey,
    secret          ChainSecret,
    ...
  }
 
  EncryptedRoutingLogBlock ::= OCTET STRING -- contains symetrically encrypted RoutingLogBlock
  RoutingLogBlock ::= SEQUENCE {
    routingLog           SEQUENCE (SIZE (0..16)) OF RoutingLog,
    nestedRoutingInformationBlock EncryptedRoutingLogBlock     
  }
  
  RoutingLog ::=SEQUENCE   {
    nodeIdentifier    OCTET STRING,
    time              GeneralizedTime,
    code              ErrorCode,
    information       OCTET STRING
  }
  
  IdentityStore ::= SEQUENCE {
    identities SEQUENCE (SIZE (0..4294967295)) OF IdentityStoreBlock
  }
  
  IdentityStoreBlock ::= SEQUENCE {
    identity            KeyInfo,
    valid               UsagePeriod,
    messageQuota        INTEGER (0..4294967295),
    transferQuota       INTEGER (0..4294967295),
    nodeAddress         OCTET STRING OPTIONAL,
    nodeKey             PublicKeyInfo,
    ...
  }
  
  ChainSecret ::= INTEGER (0..MAX)
  
  -- FIXME define requests
  HeaderRequest ::= CHOICE {
    identity      [0] HeaderRequestIdentity,
    capabilities  [1] HeaderRequestCapability,
    messageQuota  [2] HeaderRequestIncreaseMessageQuota,
    transferQuota [3] HeaderRequestIncreaseTransferQuota,
    quotaQuery    [4] HeaderRequestQuotaQuery,
    ...
  }
  
  HeaderReply ::= CHOICE {
    identity      [0] HeaderReplyIdentity,
    capabilities  [1] HeaderReplyCapability,
    ...
  }
  
  HeaderRequestIdentity ::= SEQUENCE {
    period UsagePeriod,
    identity PublicKeyInfo,
    ...
  }
  
  HeaderRequestQuotaQuery ::= SEQUENCE {
    identity PublicKeyInfo,
    ...
  }
  
  HeaderRequestIncreaseMessageQuota ::= SEQUENCE {
    identity PublicKeyInfo,
    messages INTEGER (0..4294967295),
    ...
  }
  
  HeaderRequestIncreaseTransferQuota ::= SEQUENCE {
    identity PublicKeyInfo,
    size     INTEGER (0..4294967295),
    ...
  }
  
  HeaderReplyIdentity ::= SEQUENCE {
    challenge     BIT STRING, -- bit sequence at beginning of hash from encrypted identity block
    hash          MacAlgorithmIdentifier,
    ...
  }
  
  HeaderRequestCapability ::= SEQUENCE {
    period UsagePeriod,
    ...
  }

  CypherSpec ::= SEQUENCE {
      asymetric AsymetricAlgorithmIdentifier,
      symetric  SymetricAlgorithmIdentifier,
      mac       MacAlgorithmIdentifier
  }
  
  HeaderReplyCapability ::= SEQUENCE {
    cypher            SEQUENCE (SIZE (2..256)) OF CypherSpec,
    maxTransferQuota  INTEGER (0..4294967295),
    maxMessageQuota   INTEGER (0..4294967295),
    supportedProtocol SEQUENCE OF Protocol,
    ...
  }
  
  Protocol ::= CHOICE {
    smtp  (100),
    xmmp  (110),
    ...
  }
  
  ErrorCode ::= ENUMERATED {
    
    -- System messages
    ok                    (2001),
    transferQuotaStatus   (2101),
    messageQuotaStatus    (2102),
    
    -- protocol usage failures
    transferQuotaExceeded (3001),
    messageQuotaExceeded  (3002),
    identityUnknown       (3101),
    messageChunkMissing   (3201),
    messageLifeExpired    (3202), 
    
    -- Mayor host specific errors
    hostError     (5001),
    ...
  }
  
  PayloadBlock ::= CHOICE {
    chunk  [0] ChunkMessage,
    rchunk [1] RoutableChunkMessage,
    ...
  }  

  RoutableChunkMessage ::= SEQUENCE {
    route RoutingBlock,
    chunk ChunkMessage
  }
  
  -- Compatible to PrivateKeyUsagePeriod taken from RFC3280
  UsagePeriod ::= SEQUENCE {
    notBefore       [0]     GeneralizedTime OPTIONAL,
    notAfter        [1]     GeneralizedTime OPTIONAL
 }
 
  -- Compatible to SubjectPublicKeyInfo taken from RFC3280
  PublicKeyInfo  ::=  SEQUENCE  {
    algorithm     AsymetricAlgorithmIdentifier,
    publicKey     BIT STRING  
  }
  
  KeyInfo ::= SEQUENCE {
    algorithm       AsymetricAlgorithmIdentifier,
    publicKey       BIT STRING,  
    privateKey      BIT STRING OPTIONAL,
    ...
  }


  -- adapted from RFC3280
  SymetricAlgorithmIdentifier  ::=  SEQUENCE  {
    algorithm               SymetricAlgorithm,
    parameter               SEQUENCE (SIZE (0..128)) OF AlgorithmParameters
  }

  AsymetricAlgorithmIdentifier  ::=  SEQUENCE  {
    algorithm               AsymetricAlgorithm,
    parameter               SEQUENCE (SIZE (0..128)) OF AlgorithmParameters
  }

  MacAlgorithmIdentifier  ::=  SEQUENCE  {
    algorithm               MacAlgorithm,
    parameter               SEQUENCE (SIZE (0..128)) OF AlgorithmParameters
  }

  
  SymetricAlgorithm ::= ENUMERATED {
    aes256    (1),
    aesgcm256 (2),
    ...    
  }
  
  AsymetricAlgorithm ::= ENUMERATED {
    rsa    (1),
    ecdsa  (2),
    dss    (3),
    ...    
  }
  
  MacAlgorithm ::= ENUMERATED {
    sha2   (1),
    sha3   (2),
    tiger192 (3),
    ...    
  }
  
  ECCurveType ::= ENUMERATED {
    secp192r1,
    sect163k1,
    sect163r2,
    secp224r1,
    sect233k1,
    sect233r1,
    secp256r1,
    sect283k1,
    sect283r1,
    secp384r1,
    sect409k1,
    sect409r1,
    secp521r1,
    sect571k1,
    sect571r1,
    ...
  }
  
  AlgorithmParameters ::= SEQUENCE  {
    keySize   [0] INTEGER (0..63535) OPTIONAL,
    curveType [1] ECCurveType OPTIONAL,
    ...    
  }
  
  ChunkMessage ::= SEQUENCE {
    offset INTEGER (0..MAX),
    payload OCTET STRING
  }
  
  -- Symetric key
  SymetricKey ::= SEQUENCE {
    keyType SymetricAlgorithmIdentifier,
    key     BIT STRING
  }
  
  -- Asymetric Key
  AsymetricKey ::= SEQUENCE {
    keyType       AsymetricAlgorithmIdentifier,
    publicKey     BIT STRING,
    privateKey    BIT STRING OPTIONAL
  }
  
END

pkcs-1    OBJECT IDENTIFIER ::= { iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) 1 }

-- FROM RFC5480
id-ansi        OBJECT IDENTIFIER ::= { iso(1) member-body(2) us(840) ansi-X9-62(10045) }
id-certicom    OBJECT IDENTIFIER ::= { iso(1) identified-organization(3) certicom(132) }

id-ecPublicKey OBJECT IDENTIFIER ::= { id-ansi keyType(2) 1 }

dsaEncryption  OBJECT IDENTIFIER ::= { iso(1) member-body(2) us(840) x9-57(10040) x9cm(4) 1 } -- RFC3279
rsaEncryption  OBJECT IDENTIFIER ::= { pkcs-1 1 }

secp192r1 OBJECT IDENTIFIER ::= { id-ansi  curves(3) prime(1) 1 }
sect163k1 OBJECT IDENTIFIER ::= { id-certicom curve(0) 1 }
sect163r2 OBJECT IDENTIFIER ::= { id-certicom curve(0) 15 }
secp224r1 OBJECT IDENTIFIER ::= { id-certicom curve(0) 33 }
sect233k1 OBJECT IDENTIFIER ::= { id-certicom curve(0) 26 }
sect233r1 OBJECT IDENTIFIER ::= { id-certicom curve(0) 27 }
secp256r1 OBJECT IDENTIFIER ::= { id-ansi curves(3) prime(1) 7 }
sect283k1 OBJECT IDENTIFIER ::= { id-certicom curve(0) 16 }
sect283r1 OBJECT IDENTIFIER ::= { id-certicom curve(0) 17 }
secp384r1 OBJECT IDENTIFIER ::= { id-certicom curve(0) 34 }
sect409k1 OBJECT IDENTIFIER ::= { id-certicom curve(0) 36 }
sect409r1 OBJECT IDENTIFIER ::= { id-certicom curve(0) 37 }
secp521r1 OBJECT IDENTIFIER ::= { id-certicom curve(0) 35 }
sect571k1 OBJECT IDENTIFIER ::= { id-certicom curve(0) 38 }
sect571r1 OBJECT IDENTIFIER ::= { id-certicom curve(0) 39 }
